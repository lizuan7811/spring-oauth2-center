/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package spring.boot.oath2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.file.Paths;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.DSAPublicKey;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.Function;

import javax.net.ssl.HttpsURLConnection;

import org.apache.logging.log4j.util.Strings;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import com.sshtools.j2ssh.transport.publickey.InvalidSshKeyException;
import com.sshtools.j2ssh.transport.publickey.SshPublicKey;

import spring.boot.oath2.scrabdatas.entity.StockcodeTypeEntity;
import spring.boot.oath2.scrabdatas.model.HtmlParseResult;
import spring.boot.oath2.scrabdatas.util.ConnectionFactory;
import spring.boot.oath2.scrabdatas.util.NormalUtils;
import spring.boot.oath2.websecurity.entity.Role;
import spring.boot.oath2.websecurity.entity.User;
import com.sshtools.j2ssh.transport.publickey.dsa.SshDssPublicKey;

//@SpringBootApplication(scanBasePackages = { "spring.boot.oath2","spring.boot.oath2.websecurity"})
//@EnableJpaRepositories(basePackages = "spring.boot.oath2.websecurity")
//@EntityScan(basePackages = "spring.boot.oath2.model")
//須設定掃描service、controller...bean的註解
//@ComponentScan(basePackages="spring.boot.oath2")
public class Library {

	@Autowired
	private static HttpSecurity hs;

	public static void main(String[] args) throws NoSuchAlgorithmException {
		HtmlParseResult hpr = new HtmlParseResult();
		String baseStokeTypeUrl = "https://tw.stock.yahoo.com";
		String stockTypeUrl = "https://tw.stock.yahoo.com/h/kimosel.php?";
		
		connToGetUrl(stockTypeUrl, hpr);

		hpr.getUrlMap().entrySet().forEach(url -> {
			try {
				Thread.sleep(2000);
				hpr.setTmpType(url.getKey());
				connToGetUrl(baseStokeTypeUrl + url.getValue().get(0), hpr);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		});
	}

	private static void connToGetUrl(String stockTypeUrl, HtmlParseResult hpr) {
		HttpsURLConnection connection;
		try {
			connection = ConnectionFactory.getConnectionInst(new URL(stockTypeUrl));

			InputStream ist = connection.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(ist, "BIG5"));
			String rdLine = Strings.EMPTY;
			StringBuilder sb = new StringBuilder();
			while ((rdLine = reader.readLine()) != null) {
				sb.append(rdLine);
			}
			Document doc = NormalUtils.parseHtmlToDoc(new String(sb.toString().getBytes(), "UTF-8"));
			sb.delete(0, sb.length());
			if (hpr.getUrlMap().isEmpty()) {
				Map<String, List<Object>> urlMap = (Map<String, List<Object>>) doParseToHtmlFunc(hpr).apply(doc);
				setHtmlToHprUrl(hpr).accept(urlMap);
			} else {
				List<StockcodeTypeEntity> resultList =  doParseToResultFunc(hpr).apply(doc);
				setHtmlToHprParsed(hpr).accept(resultList);
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			ConnectionFactory.disConnection();
		}
	}

	private static Consumer<Map<String, List<Object>>> setHtmlToHprUrl(HtmlParseResult hpr) {
		return new Consumer<Map<String, List<Object>>>() {
			@Override
			public void accept(Map<String, List<Object>> t) {
				if (Objects.nonNull(t))
					hpr.setUrlMap(t);
			}
		};
	}

	private static Consumer<List<StockcodeTypeEntity>> setHtmlToHprParsed(HtmlParseResult hpr) {
		return new Consumer<List<StockcodeTypeEntity>>() {
			@Override
			public void accept(List<StockcodeTypeEntity> t) {
				if (Objects.nonNull(t))
					hpr.getParsedResultList().addAll(t);
			}
		};
	}

	private static Function<Document, Map<String, List<Object>>> doParseToHtmlFunc(HtmlParseResult hpr) {
		return new Function<Document, Map<String, List<Object>>>() {
			@Override
			public Map<String, List<Object>> apply(Document doc) {
					return doParsedUrl((Document) doc, hpr);
			}
		};
	}

	private static Function<Document, List<StockcodeTypeEntity>> doParseToResultFunc(HtmlParseResult hpr) {
		return new Function<Document,List<StockcodeTypeEntity>>() {
			@Override
			public List<StockcodeTypeEntity> apply(Document doc) {
					return doParsedResult((Document) doc, hpr);
			}
		};
	}
	
	private static Map<String, List<Object>> doParsedUrl(Document doc, HtmlParseResult hpr) {
		Map<String, List<Object>> urlMap = hpr.getUrlMap();

		Elements ahref = doc.select("TR>td>a");
		for (Element eld : ahref) {
			String hrefKey = eld.text();
			String tmpUrl = eld.attr("href");
			if (eld.attr("class") != "none" && tmpUrl.startsWith("/")) {
				if (!urlMap.containsKey(hrefKey)) {
					List<Object> urlList = new ArrayList<Object>();
					urlList.add(tmpUrl);
					urlMap.put(hrefKey, urlList);
				} else {
					urlMap.get(hrefKey).add(tmpUrl);
				}
			}
		}
		System.out.println(urlMap);
		return urlMap;
	}

	private static List<StockcodeTypeEntity> doParsedResult(Document doc, HtmlParseResult hpr) {
		List<StockcodeTypeEntity> resultList = hpr.getParsedResultList();
		Elements ahref = doc.getElementsByClass("none");
		for (Element eld : ahref) {
			String hrefKey = eld.text();
			if (eld.attr("class").equals("none")) {
				List<String> tmpList=Arrays.asList(hrefKey.replace(" ",",").replace(" ","").split(","));
				resultList.add(new StockcodeTypeEntity(hpr.getTmpType(), tmpList.get(0), tmpList.get(1)) );
			}
		}
		System.out.println(resultList);

		return resultList;
	}


//	public static void main(String[] args) throws Exception {
////		SpringApplication.run(Library.class,args);
////		Map<Object,String>map=new HashMap<>(2);
////		String mapResult=map.put(map, null);
//		System.out.println(0xF0);
//		System.out.println(0x0F);
//		
//		hs.authorizeRequests().anyRequest().access(null);
//		
//		
//		
//    }
}
